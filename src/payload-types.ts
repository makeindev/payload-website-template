/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    adminUsers: AdminUserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    userAccounts: UserAccount;
    adminUsers: AdminUser;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    userAccounts: UserAccountsSelect<false> | UserAccountsSelect<true>;
    adminUsers: AdminUsersSelect<false> | AdminUsersSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    emailSettings: EmailSetting;
    header: Header;
    footer: Footer;
    homepage: Homepage;
  };
  globalsSelect: {
    emailSettings: EmailSettingsSelect<false> | EmailSettingsSelect<true>;
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    homepage: HomepageSelect<false> | HomepageSelect<true>;
  };
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (AdminUser & {
        collection: 'adminUsers';
      });
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface AdminUserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact' | 'withImage';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    badgeText?: string | null;
    badgeIconColor?: string | null;
    overlayColor?: string | null;
    media?: (number | null) | Media;
  };
  layout: (AboutBlock | ArchiveBlock | CallToActionBlock | ContentBlock | FeatureBlock | FormBlock | MediaBlock)[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (number | Post)[] | null;
  categories?: (number | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (number | AdminUser)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "adminUsers".
 */
export interface AdminUser {
  id: number;
  firstName?: string | null;
  lastName?: string | null;
  role: 'admin' | 'staff';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AboutBlock".
 */
export interface AboutBlock {
  designStyle: 'about1' | 'about3';
  header?: string | null;
  content?:
    | {
        title?: string | null;
        body?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  image?: (number | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'about';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (number | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: number | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlock".
 */
export interface FeatureBlock {
  designStyle: 'feature1' | 'feature2' | 'feature3';
  title?: string | null;
  description?: string | null;
  features?:
    | {
        lucideIcon?:
          | (
              | 'AArrowDown'
              | 'AArrowUp'
              | 'ALargeSmall'
              | 'Accessibility'
              | 'Activity'
              | 'AirVent'
              | 'Airplay'
              | 'AlarmClock'
              | 'AlarmClockCheck'
              | 'AlarmClockMinus'
              | 'AlarmClockOff'
              | 'AlarmClockPlus'
              | 'AlarmSmoke'
              | 'Album'
              | 'AlignCenter'
              | 'AlignCenterHorizontal'
              | 'AlignCenterVertical'
              | 'AlignEndHorizontal'
              | 'AlignEndVertical'
              | 'AlignHorizontalDistributeCenter'
              | 'AlignHorizontalDistributeEnd'
              | 'AlignHorizontalDistributeStart'
              | 'AlignHorizontalJustifyCenter'
              | 'AlignHorizontalJustifyEnd'
              | 'AlignHorizontalJustifyStart'
              | 'AlignHorizontalSpaceAround'
              | 'AlignHorizontalSpaceBetween'
              | 'AlignJustify'
              | 'AlignLeft'
              | 'AlignRight'
              | 'AlignStartHorizontal'
              | 'AlignStartVertical'
              | 'AlignVerticalDistributeCenter'
              | 'AlignVerticalDistributeEnd'
              | 'AlignVerticalDistributeStart'
              | 'AlignVerticalJustifyCenter'
              | 'AlignVerticalJustifyEnd'
              | 'AlignVerticalJustifyStart'
              | 'AlignVerticalSpaceAround'
              | 'AlignVerticalSpaceBetween'
              | 'Ambulance'
              | 'Ampersand'
              | 'Ampersands'
              | 'Anchor'
              | 'Angry'
              | 'Annoyed'
              | 'Antenna'
              | 'Anvil'
              | 'Aperture'
              | 'AppWindow'
              | 'AppWindowMac'
              | 'Apple'
              | 'Archive'
              | 'ArchiveRestore'
              | 'ArchiveX'
              | 'AreaChart'
              | 'Armchair'
              | 'ArrowBigDown'
              | 'ArrowBigDownDash'
              | 'ArrowBigLeft'
              | 'ArrowBigLeftDash'
              | 'ArrowBigRight'
              | 'ArrowBigRightDash'
              | 'ArrowBigUp'
              | 'ArrowBigUpDash'
              | 'ArrowDown'
              | 'ArrowDown01'
              | 'ArrowDown10'
              | 'ArrowDownAZ'
              | 'ArrowDownFromLine'
              | 'ArrowDownLeft'
              | 'ArrowDownNarrowWide'
              | 'ArrowDownRight'
              | 'ArrowDownToDot'
              | 'ArrowDownToLine'
              | 'ArrowDownUp'
              | 'ArrowDownWideNarrow'
              | 'ArrowDownZA'
              | 'ArrowLeft'
              | 'ArrowLeftFromLine'
              | 'ArrowLeftRight'
              | 'ArrowLeftToLine'
              | 'ArrowRight'
              | 'ArrowRightFromLine'
              | 'ArrowRightLeft'
              | 'ArrowRightToLine'
              | 'ArrowUp'
              | 'ArrowUp01'
              | 'ArrowUp10'
              | 'ArrowUpAZ'
              | 'ArrowUpDown'
              | 'ArrowUpFromDot'
              | 'ArrowUpFromLine'
              | 'ArrowUpLeft'
              | 'ArrowUpNarrowWide'
              | 'ArrowUpRight'
              | 'ArrowUpToLine'
              | 'ArrowUpWideNarrow'
              | 'ArrowUpZA'
              | 'ArrowsUpFromLine'
              | 'Asterisk'
              | 'AtSign'
              | 'Atom'
              | 'AudioLines'
              | 'AudioWaveform'
              | 'Award'
              | 'Axe'
              | 'Axis3d'
              | 'Baby'
              | 'Backpack'
              | 'Badge'
              | 'BadgeAlert'
              | 'BadgeCent'
              | 'BadgeCheck'
              | 'BadgeDollarSign'
              | 'BadgeEuro'
              | 'BadgeHelp'
              | 'BadgeIndianRupee'
              | 'BadgeInfo'
              | 'BadgeJapaneseYen'
              | 'BadgeMinus'
              | 'BadgePercent'
              | 'BadgePlus'
              | 'BadgePoundSterling'
              | 'BadgeRussianRuble'
              | 'BadgeSwissFranc'
              | 'BadgeX'
              | 'BaggageClaim'
              | 'Ban'
              | 'Banana'
              | 'Banknote'
              | 'BarChart'
              | 'BarChart2'
              | 'BarChart3'
              | 'BarChart4'
              | 'BarChartBig'
              | 'BarChartHorizontal'
              | 'BarChartHorizontalBig'
              | 'Barcode'
              | 'Baseline'
              | 'Bath'
              | 'Battery'
              | 'BatteryCharging'
              | 'BatteryFull'
              | 'BatteryLow'
              | 'BatteryMedium'
              | 'BatteryWarning'
              | 'Beaker'
              | 'Bean'
              | 'BeanOff'
              | 'Bed'
              | 'BedDouble'
              | 'BedSingle'
              | 'Beef'
              | 'Beer'
              | 'BeerOff'
              | 'Bell'
              | 'BellDot'
              | 'BellElectric'
              | 'BellMinus'
              | 'BellOff'
              | 'BellPlus'
              | 'BellRing'
              | 'BetweenHorizontalEnd'
              | 'BetweenHorizontalStart'
              | 'BetweenVerticalEnd'
              | 'BetweenVerticalStart'
              | 'Bike'
              | 'Binary'
              | 'Biohazard'
              | 'Bird'
              | 'Bitcoin'
              | 'Blend'
              | 'Blinds'
              | 'Blocks'
              | 'Bluetooth'
              | 'BluetoothConnected'
              | 'BluetoothOff'
              | 'BluetoothSearching'
              | 'Bold'
              | 'Bolt'
              | 'Bomb'
              | 'Bone'
              | 'Book'
              | 'BookA'
              | 'BookAudio'
              | 'BookCheck'
              | 'BookCopy'
              | 'BookDashed'
              | 'BookDown'
              | 'BookHeadphones'
              | 'BookHeart'
              | 'BookImage'
              | 'BookKey'
              | 'BookLock'
              | 'BookMarked'
              | 'BookMinus'
              | 'BookOpen'
              | 'BookOpenCheck'
              | 'BookOpenText'
              | 'BookPlus'
              | 'BookText'
              | 'BookType'
              | 'BookUp'
              | 'BookUp2'
              | 'BookUser'
              | 'BookX'
              | 'Bookmark'
              | 'BookmarkCheck'
              | 'BookmarkMinus'
              | 'BookmarkPlus'
              | 'BookmarkX'
              | 'BoomBox'
              | 'Bot'
              | 'BotMessageSquare'
              | 'BotOff'
              | 'Box'
              | 'BoxSelect'
              | 'Boxes'
              | 'Braces'
              | 'Brackets'
              | 'Brain'
              | 'BrainCircuit'
              | 'BrainCog'
              | 'BrickWall'
              | 'Briefcase'
              | 'BriefcaseBusiness'
              | 'BriefcaseMedical'
              | 'BringToFront'
              | 'Brush'
              | 'Bug'
              | 'BugOff'
              | 'BugPlay'
              | 'Building'
              | 'Building2'
              | 'Bus'
              | 'BusFront'
              | 'Cable'
              | 'CableCar'
              | 'Cake'
              | 'CakeSlice'
              | 'Calculator'
              | 'Calendar'
              | 'CalendarCheck'
              | 'CalendarCheck2'
              | 'CalendarClock'
              | 'CalendarDays'
              | 'CalendarFold'
              | 'CalendarHeart'
              | 'CalendarMinus'
              | 'CalendarMinus2'
              | 'CalendarOff'
              | 'CalendarPlus'
              | 'CalendarPlus2'
              | 'CalendarRange'
              | 'CalendarSearch'
              | 'CalendarX'
              | 'CalendarX2'
              | 'Camera'
              | 'CameraOff'
              | 'CandlestickChart'
              | 'Candy'
              | 'CandyCane'
              | 'CandyOff'
              | 'Cannabis'
              | 'Captions'
              | 'CaptionsOff'
              | 'Car'
              | 'CarFront'
              | 'CarTaxiFront'
              | 'Caravan'
              | 'Carrot'
              | 'CaseLower'
              | 'CaseSensitive'
              | 'CaseUpper'
              | 'CassetteTape'
              | 'Cast'
              | 'Castle'
              | 'Cat'
              | 'Cctv'
              | 'Check'
              | 'CheckCheck'
              | 'ChefHat'
              | 'Cherry'
              | 'ChevronDown'
              | 'ChevronFirst'
              | 'ChevronLast'
              | 'ChevronLeft'
              | 'ChevronRight'
              | 'ChevronUp'
              | 'ChevronsDown'
              | 'ChevronsDownUp'
              | 'ChevronsLeft'
              | 'ChevronsLeftRight'
              | 'ChevronsRight'
              | 'ChevronsRightLeft'
              | 'ChevronsUp'
              | 'ChevronsUpDown'
              | 'Chrome'
              | 'Church'
              | 'Cigarette'
              | 'CigaretteOff'
              | 'Circle'
              | 'CircleAlert'
              | 'CircleArrowDown'
              | 'CircleArrowLeft'
              | 'CircleArrowOutDownLeft'
              | 'CircleArrowOutDownRight'
              | 'CircleArrowOutUpLeft'
              | 'CircleArrowOutUpRight'
              | 'CircleArrowRight'
              | 'CircleArrowUp'
              | 'CircleCheck'
              | 'CircleCheckBig'
              | 'CircleChevronDown'
              | 'CircleChevronLeft'
              | 'CircleChevronRight'
              | 'CircleChevronUp'
              | 'CircleDashed'
              | 'CircleDivide'
              | 'CircleDollarSign'
              | 'CircleDot'
              | 'CircleDotDashed'
              | 'CircleEllipsis'
              | 'CircleEqual'
              | 'CircleFadingPlus'
              | 'CircleGauge'
              | 'CircleHelp'
              | 'CircleMinus'
              | 'CircleOff'
              | 'CircleParking'
              | 'CircleParkingOff'
              | 'CirclePause'
              | 'CirclePercent'
              | 'CirclePlay'
              | 'CirclePlus'
              | 'CirclePower'
              | 'CircleSlash'
              | 'CircleSlash2'
              | 'CircleStop'
              | 'CircleUser'
              | 'CircleUserRound'
              | 'CircleX'
              | 'CircuitBoard'
              | 'Citrus'
              | 'Clapperboard'
              | 'Clipboard'
              | 'ClipboardCheck'
              | 'ClipboardCopy'
              | 'ClipboardList'
              | 'ClipboardMinus'
              | 'ClipboardPaste'
              | 'ClipboardPen'
              | 'ClipboardPenLine'
              | 'ClipboardPlus'
              | 'ClipboardType'
              | 'ClipboardX'
              | 'Clock'
              | 'Clock1'
              | 'Clock10'
              | 'Clock11'
              | 'Clock12'
              | 'Clock2'
              | 'Clock3'
              | 'Clock4'
              | 'Clock5'
              | 'Clock6'
              | 'Clock7'
              | 'Clock8'
              | 'Clock9'
              | 'Cloud'
              | 'CloudCog'
              | 'CloudDownload'
              | 'CloudDrizzle'
              | 'CloudFog'
              | 'CloudHail'
              | 'CloudLightning'
              | 'CloudMoon'
              | 'CloudMoonRain'
              | 'CloudOff'
              | 'CloudRain'
              | 'CloudRainWind'
              | 'CloudSnow'
              | 'CloudSun'
              | 'CloudSunRain'
              | 'CloudUpload'
              | 'Cloudy'
              | 'Clover'
              | 'Club'
              | 'Code'
              | 'CodeXml'
              | 'Codepen'
              | 'Codesandbox'
              | 'Coffee'
              | 'Cog'
              | 'Coins'
              | 'Columns2'
              | 'Columns3'
              | 'Columns4'
              | 'Combine'
              | 'Command'
              | 'Compass'
              | 'Component'
              | 'Computer'
              | 'ConciergeBell'
              | 'Cone'
              | 'Construction'
              | 'Contact'
              | 'ContactRound'
              | 'Container'
              | 'Contrast'
              | 'Cookie'
              | 'CookingPot'
              | 'Copy'
              | 'CopyCheck'
              | 'CopyMinus'
              | 'CopyPlus'
              | 'CopySlash'
              | 'CopyX'
              | 'Copyleft'
              | 'Copyright'
              | 'CornerDownLeft'
              | 'CornerDownRight'
              | 'CornerLeftDown'
              | 'CornerLeftUp'
              | 'CornerRightDown'
              | 'CornerRightUp'
              | 'CornerUpLeft'
              | 'CornerUpRight'
              | 'Cpu'
              | 'CreativeCommons'
              | 'CreditCard'
              | 'Croissant'
              | 'Crop'
              | 'Cross'
              | 'Crosshair'
              | 'Crown'
              | 'Cuboid'
              | 'CupSoda'
              | 'Currency'
              | 'Cylinder'
              | 'Database'
              | 'DatabaseBackup'
              | 'DatabaseZap'
              | 'Delete'
              | 'Dessert'
              | 'Diameter'
              | 'Diamond'
              | 'DiamondMinus'
              | 'DiamondPercent'
              | 'DiamondPlus'
              | 'Dice1'
              | 'Dice2'
              | 'Dice3'
              | 'Dice4'
              | 'Dice5'
              | 'Dice6'
              | 'Dices'
              | 'Diff'
              | 'Disc'
              | 'Disc2'
              | 'Disc3'
              | 'DiscAlbum'
              | 'Divide'
              | 'Dna'
              | 'DnaOff'
              | 'Dock'
              | 'Dog'
              | 'DollarSign'
              | 'Donut'
              | 'DoorClosed'
              | 'DoorOpen'
              | 'Dot'
              | 'Download'
              | 'DraftingCompass'
              | 'Drama'
              | 'Dribbble'
              | 'Drill'
              | 'Droplet'
              | 'Droplets'
              | 'Drum'
              | 'Drumstick'
              | 'Dumbbell'
              | 'Ear'
              | 'EarOff'
              | 'Earth'
              | 'EarthLock'
              | 'Eclipse'
              | 'Egg'
              | 'EggFried'
              | 'EggOff'
              | 'Ellipsis'
              | 'EllipsisVertical'
              | 'Equal'
              | 'EqualNot'
              | 'Eraser'
              | 'Euro'
              | 'Expand'
              | 'ExternalLink'
              | 'Eye'
              | 'EyeOff'
              | 'Facebook'
              | 'Factory'
              | 'Fan'
              | 'FastForward'
              | 'Feather'
              | 'Fence'
              | 'FerrisWheel'
              | 'Figma'
              | 'File'
              | 'FileArchive'
              | 'FileAudio'
              | 'FileAudio2'
              | 'FileAxis3d'
              | 'FileBadge'
              | 'FileBadge2'
              | 'FileBarChart'
              | 'FileBarChart2'
              | 'FileBox'
              | 'FileCheck'
              | 'FileCheck2'
              | 'FileClock'
              | 'FileCode'
              | 'FileCode2'
              | 'FileCog'
              | 'FileDiff'
              | 'FileDigit'
              | 'FileDown'
              | 'FileHeart'
              | 'FileImage'
              | 'FileInput'
              | 'FileJson'
              | 'FileJson2'
              | 'FileKey'
              | 'FileKey2'
              | 'FileLineChart'
              | 'FileLock'
              | 'FileLock2'
              | 'FileMinus'
              | 'FileMinus2'
              | 'FileMusic'
              | 'FileOutput'
              | 'FilePen'
              | 'FilePenLine'
              | 'FilePieChart'
              | 'FilePlus'
              | 'FilePlus2'
              | 'FileQuestion'
              | 'FileScan'
              | 'FileSearch'
              | 'FileSearch2'
              | 'FileSliders'
              | 'FileSpreadsheet'
              | 'FileStack'
              | 'FileSymlink'
              | 'FileTerminal'
              | 'FileText'
              | 'FileType'
              | 'FileType2'
              | 'FileUp'
              | 'FileVideo'
              | 'FileVideo2'
              | 'FileVolume'
              | 'FileVolume2'
              | 'FileWarning'
              | 'FileX'
              | 'FileX2'
              | 'Files'
              | 'Film'
              | 'Filter'
              | 'FilterX'
              | 'Fingerprint'
              | 'FireExtinguisher'
              | 'Fish'
              | 'FishOff'
              | 'FishSymbol'
              | 'Flag'
              | 'FlagOff'
              | 'FlagTriangleLeft'
              | 'FlagTriangleRight'
              | 'Flame'
              | 'FlameKindling'
              | 'Flashlight'
              | 'FlashlightOff'
              | 'FlaskConical'
              | 'FlaskConicalOff'
              | 'FlaskRound'
              | 'FlipHorizontal'
              | 'FlipHorizontal2'
              | 'FlipVertical'
              | 'FlipVertical2'
              | 'Flower'
              | 'Flower2'
              | 'Focus'
              | 'FoldHorizontal'
              | 'FoldVertical'
              | 'Folder'
              | 'FolderArchive'
              | 'FolderCheck'
              | 'FolderClock'
              | 'FolderClosed'
              | 'FolderCog'
              | 'FolderDot'
              | 'FolderDown'
              | 'FolderGit'
              | 'FolderGit2'
              | 'FolderHeart'
              | 'FolderInput'
              | 'FolderKanban'
              | 'FolderKey'
              | 'FolderLock'
              | 'FolderMinus'
              | 'FolderOpen'
              | 'FolderOpenDot'
              | 'FolderOutput'
              | 'FolderPen'
              | 'FolderPlus'
              | 'FolderRoot'
              | 'FolderSearch'
              | 'FolderSearch2'
              | 'FolderSymlink'
              | 'FolderSync'
              | 'FolderTree'
              | 'FolderUp'
              | 'FolderX'
              | 'Folders'
              | 'Footprints'
              | 'Forklift'
              | 'Forward'
              | 'Frame'
              | 'Framer'
              | 'Frown'
              | 'Fuel'
              | 'Fullscreen'
              | 'GalleryHorizontal'
              | 'GalleryHorizontalEnd'
              | 'GalleryThumbnails'
              | 'GalleryVertical'
              | 'GalleryVerticalEnd'
              | 'Gamepad'
              | 'Gamepad2'
              | 'GanttChart'
              | 'Gauge'
              | 'Gavel'
              | 'Gem'
              | 'Ghost'
              | 'Gift'
              | 'GitBranch'
              | 'GitBranchPlus'
              | 'GitCommitHorizontal'
              | 'GitCommitVertical'
              | 'GitCompare'
              | 'GitCompareArrows'
              | 'GitFork'
              | 'GitGraph'
              | 'GitMerge'
              | 'GitPullRequest'
              | 'GitPullRequestArrow'
              | 'GitPullRequestClosed'
              | 'GitPullRequestCreate'
              | 'GitPullRequestCreateArrow'
              | 'GitPullRequestDraft'
              | 'Github'
              | 'Gitlab'
              | 'GlassWater'
              | 'Glasses'
              | 'Globe'
              | 'GlobeLock'
              | 'Goal'
              | 'Grab'
              | 'GraduationCap'
              | 'Grape'
              | 'Grid2x2'
              | 'Grid2x2Check'
              | 'Grid2x2X'
              | 'Grid3x3'
              | 'Grip'
              | 'GripHorizontal'
              | 'GripVertical'
              | 'Group'
              | 'Guitar'
              | 'Ham'
              | 'Hammer'
              | 'Hand'
              | 'HandCoins'
              | 'HandHeart'
              | 'HandHelping'
              | 'HandMetal'
              | 'HandPlatter'
              | 'Handshake'
              | 'HardDrive'
              | 'HardDriveDownload'
              | 'HardDriveUpload'
              | 'HardHat'
              | 'Hash'
              | 'Haze'
              | 'HdmiPort'
              | 'Heading'
              | 'Heading1'
              | 'Heading2'
              | 'Heading3'
              | 'Heading4'
              | 'Heading5'
              | 'Heading6'
              | 'Headphones'
              | 'Headset'
              | 'Heart'
              | 'HeartCrack'
              | 'HeartHandshake'
              | 'HeartOff'
              | 'HeartPulse'
              | 'Heater'
              | 'Hexagon'
              | 'Highlighter'
              | 'History'
              | 'Home'
              | 'Hop'
              | 'HopOff'
              | 'Hospital'
              | 'Hotel'
              | 'Hourglass'
              | 'IceCreamBowl'
              | 'IceCreamCone'
              | 'Image'
              | 'ImageDown'
              | 'ImageMinus'
              | 'ImageOff'
              | 'ImagePlay'
              | 'ImagePlus'
              | 'ImageUp'
              | 'Images'
              | 'Import'
              | 'Inbox'
              | 'IndentDecrease'
              | 'IndentIncrease'
              | 'IndianRupee'
              | 'Infinity'
              | 'Info'
              | 'InspectionPanel'
              | 'Instagram'
              | 'Italic'
              | 'IterationCcw'
              | 'IterationCw'
              | 'JapaneseYen'
              | 'Joystick'
              | 'Kanban'
              | 'Key'
              | 'KeyRound'
              | 'KeySquare'
              | 'Keyboard'
              | 'KeyboardMusic'
              | 'KeyboardOff'
              | 'Lamp'
              | 'LampCeiling'
              | 'LampDesk'
              | 'LampFloor'
              | 'LampWallDown'
              | 'LampWallUp'
              | 'LandPlot'
              | 'Landmark'
              | 'Languages'
              | 'Laptop'
              | 'LaptopMinimal'
              | 'Lasso'
              | 'LassoSelect'
              | 'Laugh'
              | 'Layers'
              | 'Layers2'
              | 'Layers3'
              | 'LayoutDashboard'
              | 'LayoutGrid'
              | 'LayoutList'
              | 'LayoutPanelLeft'
              | 'LayoutPanelTop'
              | 'LayoutTemplate'
              | 'Leaf'
              | 'LeafyGreen'
              | 'Library'
              | 'LibraryBig'
              | 'LifeBuoy'
              | 'Ligature'
              | 'Lightbulb'
              | 'LightbulbOff'
              | 'LineChart'
              | 'Link'
              | 'Link2'
              | 'Link2Off'
              | 'Linkedin'
              | 'List'
              | 'ListChecks'
              | 'ListCollapse'
              | 'ListEnd'
              | 'ListFilter'
              | 'ListMinus'
              | 'ListMusic'
              | 'ListOrdered'
              | 'ListPlus'
              | 'ListRestart'
              | 'ListStart'
              | 'ListTodo'
              | 'ListTree'
              | 'ListVideo'
              | 'ListX'
              | 'Loader'
              | 'LoaderCircle'
              | 'LoaderPinwheel'
              | 'Locate'
              | 'LocateFixed'
              | 'LocateOff'
              | 'Lock'
              | 'LockKeyhole'
              | 'LockKeyholeOpen'
              | 'LockOpen'
              | 'LogIn'
              | 'LogOut'
              | 'Lollipop'
              | 'Luggage'
              | 'Magnet'
              | 'Mail'
              | 'MailCheck'
              | 'MailMinus'
              | 'MailOpen'
              | 'MailPlus'
              | 'MailQuestion'
              | 'MailSearch'
              | 'MailWarning'
              | 'MailX'
              | 'Mailbox'
              | 'Mails'
              | 'Map'
              | 'MapPin'
              | 'MapPinOff'
              | 'MapPinned'
              | 'Martini'
              | 'Maximize'
              | 'Maximize2'
              | 'Medal'
              | 'Megaphone'
              | 'MegaphoneOff'
              | 'Meh'
              | 'MemoryStick'
              | 'Menu'
              | 'Merge'
              | 'MessageCircle'
              | 'MessageCircleCode'
              | 'MessageCircleDashed'
              | 'MessageCircleHeart'
              | 'MessageCircleMore'
              | 'MessageCircleOff'
              | 'MessageCirclePlus'
              | 'MessageCircleQuestion'
              | 'MessageCircleReply'
              | 'MessageCircleWarning'
              | 'MessageCircleX'
              | 'MessageSquare'
              | 'MessageSquareCode'
              | 'MessageSquareDashed'
              | 'MessageSquareDiff'
              | 'MessageSquareDot'
              | 'MessageSquareHeart'
              | 'MessageSquareMore'
              | 'MessageSquareOff'
              | 'MessageSquarePlus'
              | 'MessageSquareQuote'
              | 'MessageSquareReply'
              | 'MessageSquareShare'
              | 'MessageSquareText'
              | 'MessageSquareWarning'
              | 'MessageSquareX'
              | 'MessagesSquare'
              | 'Mic'
              | 'MicOff'
              | 'MicVocal'
              | 'Microscope'
              | 'Microwave'
              | 'Milestone'
              | 'Milk'
              | 'MilkOff'
              | 'Minimize'
              | 'Minimize2'
              | 'Minus'
              | 'Monitor'
              | 'MonitorCheck'
              | 'MonitorDot'
              | 'MonitorDown'
              | 'MonitorOff'
              | 'MonitorPause'
              | 'MonitorPlay'
              | 'MonitorSmartphone'
              | 'MonitorSpeaker'
              | 'MonitorStop'
              | 'MonitorUp'
              | 'MonitorX'
              | 'Moon'
              | 'MoonStar'
              | 'Mountain'
              | 'MountainSnow'
              | 'Mouse'
              | 'MouseOff'
              | 'MousePointer'
              | 'MousePointer2'
              | 'MousePointerBan'
              | 'MousePointerClick'
              | 'Move'
              | 'Move3d'
              | 'MoveDiagonal'
              | 'MoveDiagonal2'
              | 'MoveDown'
              | 'MoveDownLeft'
              | 'MoveDownRight'
              | 'MoveHorizontal'
              | 'MoveLeft'
              | 'MoveRight'
              | 'MoveUp'
              | 'MoveUpLeft'
              | 'MoveUpRight'
              | 'MoveVertical'
              | 'Music'
              | 'Music2'
              | 'Music3'
              | 'Music4'
              | 'Navigation'
              | 'Navigation2'
              | 'Navigation2Off'
              | 'NavigationOff'
              | 'Network'
              | 'Newspaper'
              | 'Nfc'
              | 'Notebook'
              | 'NotebookPen'
              | 'NotebookTabs'
              | 'NotebookText'
              | 'NotepadText'
              | 'NotepadTextDashed'
              | 'Nut'
              | 'NutOff'
              | 'Octagon'
              | 'OctagonAlert'
              | 'OctagonPause'
              | 'OctagonX'
              | 'Option'
              | 'Orbit'
              | 'Origami'
              | 'Package'
              | 'Package2'
              | 'PackageCheck'
              | 'PackageMinus'
              | 'PackageOpen'
              | 'PackagePlus'
              | 'PackageSearch'
              | 'PackageX'
              | 'PaintBucket'
              | 'PaintRoller'
              | 'Paintbrush'
              | 'Paintbrush2'
              | 'Palette'
              | 'PanelBottom'
              | 'PanelBottomClose'
              | 'PanelBottomDashed'
              | 'PanelBottomOpen'
              | 'PanelLeft'
              | 'PanelLeftClose'
              | 'PanelLeftDashed'
              | 'PanelLeftOpen'
              | 'PanelRight'
              | 'PanelRightClose'
              | 'PanelRightDashed'
              | 'PanelRightOpen'
              | 'PanelTop'
              | 'PanelTopClose'
              | 'PanelTopDashed'
              | 'PanelTopOpen'
              | 'PanelsLeftBottom'
              | 'PanelsRightBottom'
              | 'PanelsTopLeft'
              | 'Paperclip'
              | 'Parentheses'
              | 'ParkingMeter'
              | 'PartyPopper'
              | 'Pause'
              | 'PawPrint'
              | 'PcCase'
              | 'Pen'
              | 'PenLine'
              | 'PenTool'
              | 'Pencil'
              | 'PencilLine'
              | 'PencilRuler'
              | 'Pentagon'
              | 'Percent'
              | 'PersonStanding'
              | 'Phone'
              | 'PhoneCall'
              | 'PhoneForwarded'
              | 'PhoneIncoming'
              | 'PhoneMissed'
              | 'PhoneOff'
              | 'PhoneOutgoing'
              | 'Pi'
              | 'Piano'
              | 'Pickaxe'
              | 'PictureInPicture'
              | 'PictureInPicture2'
              | 'PieChart'
              | 'PiggyBank'
              | 'Pilcrow'
              | 'PilcrowLeft'
              | 'PilcrowRight'
              | 'Pill'
              | 'Pin'
              | 'PinOff'
              | 'Pipette'
              | 'Pizza'
              | 'Plane'
              | 'PlaneLanding'
              | 'PlaneTakeoff'
              | 'Play'
              | 'Plug'
              | 'Plug2'
              | 'PlugZap'
              | 'PlugZap2'
              | 'Plus'
              | 'Pocket'
              | 'PocketKnife'
              | 'Podcast'
              | 'Pointer'
              | 'PointerOff'
              | 'Popcorn'
              | 'Popsicle'
              | 'PoundSterling'
              | 'Power'
              | 'PowerOff'
              | 'Presentation'
              | 'Printer'
              | 'Projector'
              | 'Proportions'
              | 'Puzzle'
              | 'Pyramid'
              | 'QrCode'
              | 'Quote'
              | 'Rabbit'
              | 'Radar'
              | 'Radiation'
              | 'Radical'
              | 'Radio'
              | 'RadioReceiver'
              | 'RadioTower'
              | 'Radius'
              | 'RailSymbol'
              | 'Rainbow'
              | 'Rat'
              | 'Ratio'
              | 'Receipt'
              | 'ReceiptCent'
              | 'ReceiptEuro'
              | 'ReceiptIndianRupee'
              | 'ReceiptJapaneseYen'
              | 'ReceiptPoundSterling'
              | 'ReceiptRussianRuble'
              | 'ReceiptSwissFranc'
              | 'ReceiptText'
              | 'RectangleEllipsis'
              | 'RectangleHorizontal'
              | 'RectangleVertical'
              | 'Recycle'
              | 'Redo'
              | 'Redo2'
              | 'RedoDot'
              | 'RefreshCcw'
              | 'RefreshCcwDot'
              | 'RefreshCw'
              | 'RefreshCwOff'
              | 'Refrigerator'
              | 'Regex'
              | 'RemoveFormatting'
              | 'Repeat'
              | 'Repeat1'
              | 'Repeat2'
              | 'Replace'
              | 'ReplaceAll'
              | 'Reply'
              | 'ReplyAll'
              | 'Rewind'
              | 'Ribbon'
              | 'Rocket'
              | 'RockingChair'
              | 'RollerCoaster'
              | 'Rotate3d'
              | 'RotateCcw'
              | 'RotateCcwSquare'
              | 'RotateCw'
              | 'RotateCwSquare'
              | 'Route'
              | 'RouteOff'
              | 'Router'
              | 'Rows2'
              | 'Rows3'
              | 'Rows4'
              | 'Rss'
              | 'Ruler'
              | 'RussianRuble'
              | 'Sailboat'
              | 'Salad'
              | 'Sandwich'
              | 'Satellite'
              | 'SatelliteDish'
              | 'Save'
              | 'SaveAll'
              | 'Scale'
              | 'Scale3d'
              | 'Scaling'
              | 'Scan'
              | 'ScanBarcode'
              | 'ScanEye'
              | 'ScanFace'
              | 'ScanLine'
              | 'ScanSearch'
              | 'ScanText'
              | 'ScatterChart'
              | 'School'
              | 'Scissors'
              | 'ScissorsLineDashed'
              | 'ScreenShare'
              | 'ScreenShareOff'
              | 'Scroll'
              | 'ScrollText'
              | 'Search'
              | 'SearchCheck'
              | 'SearchCode'
              | 'SearchSlash'
              | 'SearchX'
              | 'Send'
              | 'SendHorizontal'
              | 'SendToBack'
              | 'SeparatorHorizontal'
              | 'SeparatorVertical'
              | 'Server'
              | 'ServerCog'
              | 'ServerCrash'
              | 'ServerOff'
              | 'Settings'
              | 'Settings2'
              | 'Shapes'
              | 'Share'
              | 'Share2'
              | 'Sheet'
              | 'Shell'
              | 'Shield'
              | 'ShieldAlert'
              | 'ShieldBan'
              | 'ShieldCheck'
              | 'ShieldEllipsis'
              | 'ShieldHalf'
              | 'ShieldMinus'
              | 'ShieldOff'
              | 'ShieldPlus'
              | 'ShieldQuestion'
              | 'ShieldX'
              | 'Ship'
              | 'ShipWheel'
              | 'Shirt'
              | 'ShoppingBag'
              | 'ShoppingBasket'
              | 'ShoppingCart'
              | 'Shovel'
              | 'ShowerHead'
              | 'Shrink'
              | 'Shrub'
              | 'Shuffle'
              | 'Sigma'
              | 'Signal'
              | 'SignalHigh'
              | 'SignalLow'
              | 'SignalMedium'
              | 'SignalZero'
              | 'Signpost'
              | 'SignpostBig'
              | 'Siren'
              | 'SkipBack'
              | 'SkipForward'
              | 'Skull'
              | 'Slack'
              | 'Slash'
              | 'Slice'
              | 'SlidersHorizontal'
              | 'SlidersVertical'
              | 'Smartphone'
              | 'SmartphoneCharging'
              | 'SmartphoneNfc'
              | 'Smile'
              | 'SmilePlus'
              | 'Snail'
              | 'Snowflake'
              | 'Sofa'
              | 'Soup'
              | 'Space'
              | 'Spade'
              | 'Sparkle'
              | 'Sparkles'
              | 'Speaker'
              | 'Speech'
              | 'SpellCheck'
              | 'SpellCheck2'
              | 'Spline'
              | 'Split'
              | 'SprayCan'
              | 'Sprout'
              | 'Square'
              | 'SquareActivity'
              | 'SquareArrowDown'
              | 'SquareArrowDownLeft'
              | 'SquareArrowDownRight'
              | 'SquareArrowLeft'
              | 'SquareArrowOutDownLeft'
              | 'SquareArrowOutDownRight'
              | 'SquareArrowOutUpLeft'
              | 'SquareArrowOutUpRight'
              | 'SquareArrowRight'
              | 'SquareArrowUp'
              | 'SquareArrowUpLeft'
              | 'SquareArrowUpRight'
              | 'SquareAsterisk'
              | 'SquareBottomDashedScissors'
              | 'SquareCheck'
              | 'SquareCheckBig'
              | 'SquareChevronDown'
              | 'SquareChevronLeft'
              | 'SquareChevronRight'
              | 'SquareChevronUp'
              | 'SquareCode'
              | 'SquareDashedBottom'
              | 'SquareDashedBottomCode'
              | 'SquareDashedKanban'
              | 'SquareDashedMousePointer'
              | 'SquareDivide'
              | 'SquareDot'
              | 'SquareEqual'
              | 'SquareFunction'
              | 'SquareGanttChart'
              | 'SquareKanban'
              | 'SquareLibrary'
              | 'SquareM'
              | 'SquareMenu'
              | 'SquareMinus'
              | 'SquareMousePointer'
              | 'SquareParking'
              | 'SquareParkingOff'
              | 'SquarePen'
              | 'SquarePercent'
              | 'SquarePi'
              | 'SquarePilcrow'
              | 'SquarePlay'
              | 'SquarePlus'
              | 'SquarePower'
              | 'SquareRadical'
              | 'SquareScissors'
              | 'SquareSigma'
              | 'SquareSlash'
              | 'SquareSplitHorizontal'
              | 'SquareSplitVertical'
              | 'SquareStack'
              | 'SquareTerminal'
              | 'SquareUser'
              | 'SquareUserRound'
              | 'SquareX'
              | 'Squircle'
              | 'Squirrel'
              | 'Stamp'
              | 'Star'
              | 'StarHalf'
              | 'StarOff'
              | 'StepBack'
              | 'StepForward'
              | 'Stethoscope'
              | 'Sticker'
              | 'StickyNote'
              | 'Store'
              | 'StretchHorizontal'
              | 'StretchVertical'
              | 'Strikethrough'
              | 'Subscript'
              | 'Sun'
              | 'SunDim'
              | 'SunMedium'
              | 'SunMoon'
              | 'SunSnow'
              | 'Sunrise'
              | 'Sunset'
              | 'Superscript'
              | 'SwatchBook'
              | 'SwissFranc'
              | 'SwitchCamera'
              | 'Sword'
              | 'Swords'
              | 'Syringe'
              | 'Table'
              | 'Table2'
              | 'TableCellsMerge'
              | 'TableCellsSplit'
              | 'TableColumnsSplit'
              | 'TableProperties'
              | 'TableRowsSplit'
              | 'Tablet'
              | 'TabletSmartphone'
              | 'Tablets'
              | 'Tag'
              | 'Tags'
              | 'Tally1'
              | 'Tally2'
              | 'Tally3'
              | 'Tally4'
              | 'Tally5'
              | 'Tangent'
              | 'Target'
              | 'Telescope'
              | 'Tent'
              | 'TentTree'
              | 'Terminal'
              | 'TestTube'
              | 'TestTubeDiagonal'
              | 'TestTubes'
              | 'Text'
              | 'TextCursor'
              | 'TextCursorInput'
              | 'TextQuote'
              | 'TextSearch'
              | 'TextSelect'
              | 'Theater'
              | 'Thermometer'
              | 'ThermometerSnowflake'
              | 'ThermometerSun'
              | 'ThumbsDown'
              | 'ThumbsUp'
              | 'Ticket'
              | 'TicketCheck'
              | 'TicketMinus'
              | 'TicketPercent'
              | 'TicketPlus'
              | 'TicketSlash'
              | 'TicketX'
              | 'Timer'
              | 'TimerOff'
              | 'TimerReset'
              | 'ToggleLeft'
              | 'ToggleRight'
              | 'Tornado'
              | 'Torus'
              | 'Touchpad'
              | 'TouchpadOff'
              | 'TowerControl'
              | 'ToyBrick'
              | 'Tractor'
              | 'TrafficCone'
              | 'TrainFront'
              | 'TrainFrontTunnel'
              | 'TrainTrack'
              | 'TramFront'
              | 'Trash'
              | 'Trash2'
              | 'TreeDeciduous'
              | 'TreePalm'
              | 'TreePine'
              | 'Trees'
              | 'Trello'
              | 'TrendingDown'
              | 'TrendingUp'
              | 'Triangle'
              | 'TriangleAlert'
              | 'TriangleRight'
              | 'Trophy'
              | 'Truck'
              | 'Turtle'
              | 'Tv'
              | 'Tv2'
              | 'Twitch'
              | 'Twitter'
              | 'Type'
              | 'Umbrella'
              | 'UmbrellaOff'
              | 'Underline'
              | 'Undo'
              | 'Undo2'
              | 'UndoDot'
              | 'UnfoldHorizontal'
              | 'UnfoldVertical'
              | 'Ungroup'
              | 'University'
              | 'Unlink'
              | 'Unlink2'
              | 'Unplug'
              | 'Upload'
              | 'Usb'
              | 'User'
              | 'UserCheck'
              | 'UserCog'
              | 'UserMinus'
              | 'UserPlus'
              | 'UserRound'
              | 'UserRoundCheck'
              | 'UserRoundCog'
              | 'UserRoundMinus'
              | 'UserRoundPlus'
              | 'UserRoundSearch'
              | 'UserRoundX'
              | 'UserSearch'
              | 'UserX'
              | 'Users'
              | 'UsersRound'
              | 'Utensils'
              | 'UtensilsCrossed'
              | 'UtilityPole'
              | 'Variable'
              | 'Vault'
              | 'Vegan'
              | 'VenetianMask'
              | 'Vibrate'
              | 'VibrateOff'
              | 'Video'
              | 'VideoOff'
              | 'Videotape'
              | 'View'
              | 'Voicemail'
              | 'Volume'
              | 'Volume1'
              | 'Volume2'
              | 'VolumeX'
              | 'Vote'
              | 'Wallet'
              | 'WalletCards'
              | 'WalletMinimal'
              | 'Wallpaper'
              | 'Wand'
              | 'WandSparkles'
              | 'Warehouse'
              | 'WashingMachine'
              | 'Watch'
              | 'Waves'
              | 'Waypoints'
              | 'Webcam'
              | 'Webhook'
              | 'WebhookOff'
              | 'Weight'
              | 'Wheat'
              | 'WheatOff'
              | 'WholeWord'
              | 'Wifi'
              | 'WifiOff'
              | 'Wind'
              | 'Wine'
              | 'WineOff'
              | 'Workflow'
              | 'Worm'
              | 'WrapText'
              | 'Wrench'
              | 'X'
              | 'Youtube'
              | 'Zap'
              | 'ZapOff'
              | 'ZoomIn'
              | 'ZoomOut'
            )
          | null;
        title?: string | null;
        description?: string | null;
        badge?: string | null;
        badgeVariant?: ('default' | 'secondary' | 'outline' | 'destructive') | null;
        id?: string | null;
      }[]
    | null;
  image?: (number | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'feature';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  role: 'user';
  /**
   * Has the user verified their email address
   */
  emailVerified?: boolean | null;
  emailVerificationToken?: string | null;
  emailVerificationExpires?: string | null;
  passwordResetToken?: string | null;
  passwordResetExpires?: string | null;
  loginHistory?:
    | {
        date: string;
        ip?: string | null;
        userAgent?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "userAccounts".
 */
export interface UserAccount {
  id: number;
  name?: string | null;
  picture?: string | null;
  user: number | User;
  issuerName: string;
  scope?: string | null;
  sub: string;
  passkey?: {
    credentialId: string;
    publicKey:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    counter: number;
    transports:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    deviceType: string;
    backedUp: boolean;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'userAccounts';
        value: number | UserAccount;
      } | null)
    | ({
        relationTo: 'adminUsers';
        value: number | AdminUser;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'adminUsers';
        value: number | AdminUser;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user:
    | {
        relationTo: 'users';
        value: number | User;
      }
    | {
        relationTo: 'adminUsers';
        value: number | AdminUser;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        badgeText?: T;
        badgeIconColor?: T;
        overlayColor?: T;
        media?: T;
      };
  layout?:
    | T
    | {
        about?: T | AboutBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        feature?: T | FeatureBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AboutBlock_select".
 */
export interface AboutBlockSelect<T extends boolean = true> {
  designStyle?: T;
  header?: T;
  content?:
    | T
    | {
        title?: T;
        body?: T;
        id?: T;
      };
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlock_select".
 */
export interface FeatureBlockSelect<T extends boolean = true> {
  designStyle?: T;
  title?: T;
  description?: T;
  features?:
    | T
    | {
        lucideIcon?: T;
        title?: T;
        description?: T;
        badge?: T;
        badgeVariant?: T;
        id?: T;
      };
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  emailVerified?: T;
  emailVerificationToken?: T;
  emailVerificationExpires?: T;
  passwordResetToken?: T;
  passwordResetExpires?: T;
  loginHistory?:
    | T
    | {
        date?: T;
        ip?: T;
        userAgent?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "userAccounts_select".
 */
export interface UserAccountsSelect<T extends boolean = true> {
  name?: T;
  picture?: T;
  user?: T;
  issuerName?: T;
  scope?: T;
  sub?: T;
  passkey?:
    | T
    | {
        credentialId?: T;
        publicKey?: T;
        counter?: T;
        transports?: T;
        deviceType?: T;
        backedUp?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "adminUsers_select".
 */
export interface AdminUsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "emailSettings".
 */
export interface EmailSetting {
  id: number;
  provider: 'nodemailer';
  smtpHost?: string | null;
  smtpPort?: number | null;
  smtpUser?: string | null;
  smtpPass?: string | null;
  smtpSecure?: boolean | null;
  emailFrom: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  logo?: (number | null) | Media;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        children?:
          | {
              item: {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: number | Page;
                      } | null)
                    | ({
                        relationTo: 'posts';
                        value: number | Post;
                      } | null);
                  url?: string | null;
                  label: string;
                };
                menuContent?: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                } | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  logo?: (number | null) | Media;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage".
 */
export interface Homepage {
  id: number;
  /**
   * Select the page to use as the site homepage.
   */
  home: number | Page;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "emailSettings_select".
 */
export interface EmailSettingsSelect<T extends boolean = true> {
  provider?: T;
  smtpHost?: T;
  smtpPort?: T;
  smtpUser?: T;
  smtpPass?: T;
  smtpSecure?: T;
  emailFrom?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        children?:
          | T
          | {
              item?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    menuContent?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logo?: T;
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage_select".
 */
export interface HomepageSelect<T extends boolean = true> {
  home?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    global?: string | null;
    user?: (number | null) | AdminUser;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}